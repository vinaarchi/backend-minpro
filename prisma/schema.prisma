// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  fullname       String
  email          String   @unique
  password       String
  imgProfile     String?
  isVerified     Boolean  @default(false)
  role           Role     @default(CUSTOMER)
  referralCode   String?  @unique
  referralUsedBy User[]   @relation("UserReferrals")
  referredBy     User?    @relation("UserReferrals", fields: [referredById], references: [id])
  referredById   Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  events          Event[]          @relation("UserEvents")
  reviews         Review[]
  points          PointBalance[]
  discountCoupons DiscountCoupon[]
}

model Event {
  event_id         Int      @id @default(autoincrement())
  name             String
  description      String
  price            Int
  date             DateTime
  time             DateTime
  location         String
  availableSeats   Int
  organiserId      Int
  categoryId       Int
  locationDetailId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  category       EventCategory  @relation(fields: [categoryId], references: [id], name: "EventCategoryEvents")
  organiser      User           @relation(fields: [organiserId], references: [id], name: "UserEvents")
  locationDetail LocationDetail @relation(fields: [locationDetailId], references: [id])
  reviews        Review[]
  tickets        Ticket[]
  promotions     Promotion[]
}

model EventCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events Event[] @relation("EventCategoryEvents")
}

model LocationDetail {
  id        Int      @id @default(autoincrement())
  country   String
  state     String
  city      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
}

model Review {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [event_id])
  user  User  @relation(fields: [userId], references: [id])
}

model Ticket {
  ticket_id  Int        @id @default(autoincrement())
  eventId    Int
  ticketType TicketType
  price      Int
  available  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  event Event @relation(fields: [eventId], references: [event_id])
}

model Promotion {
  promotion_id   Int           @id @default(autoincrement())
  eventId        Int
  type           PromotionType
  value          Int
  promotionCode  String        @unique
  startDate      DateTime
  expirationDate DateTime
  maxUse         Int
  useCount       Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  event Event @relation(fields: [eventId], references: [event_id])
}

model PointBalance {
  id             Int       @id @default(autoincrement())
  points         Int       @default(0)
  expirationDate DateTime?
  userId         Int
  user           User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model DiscountCoupon {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  discount       Int
  expirationDate DateTime
  userId         Int
  user           User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum TicketType {
  REGULAR
  VIP
}

enum PromotionType {
  PERCENTAGE
  FLAT
}
