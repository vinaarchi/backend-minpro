generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int              @id @default(autoincrement())

  username        String

  fullname        String
  email           String           @unique
  password        String
  imgProfile      String?
  isVerified      Boolean          @default(false)
  role            Role             @default(CUSTOMER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  referralCode    String?          @unique
  referredById    Int?
  discountCoupons DiscountCoupon[]
  events          Event[]          @relation("UserEvents")
  points          PointBalance[]
  reviews         Review[]
  referredBy      User?            @relation("UserReferrals", fields: [referredById], references: [id])
  referralUsedBy  User[]           @relation("UserReferrals")
}

model Event {
  event_id         Int             @id @default(autoincrement())
  name             String          @unique
  description      String
  date             DateTime
  time             DateTime
  location         String
  organiserId      Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  categoryId       Int?
  locationDetailId Int?
  heldBy           String          @default("unknown")
  image            String?
  category         EventCategory?  @relation("EventCategory", fields: [categoryId], references: [id])
  locationDetail   LocationDetail? @relation(fields: [locationDetailId], references: [id])
  organiser        User            @relation("UserEvents", fields: [organiserId], references: [id])
  promotions       Promotion[]
  reviews          Review[]
  tickets          Ticket[]
}

model EventCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  format    String   @default("Lainnya")
  topic     String   @default("Lainnya")
  events    Event[]  @relation("EventCategory")
}

model LocationDetail {
  id        Int      @id @default(autoincrement())
  country   String
  state     String
  city      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Review {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [event_id])
  user      User     @relation(fields: [userId], references: [id])
}

model Ticket {
  ticket_id     Int      @id @default(autoincrement())
  eventId       Int
  price         Int?
  available     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  contactEmail  String
  contactName   String
  contactNumber String
  description   String
  expiredDate   DateTime
  type          String   @default("paid")

  startDate  DateTime
  ticketName String
  event      Event    @relation(fields: [eventId], references: [event_id])
}

model Promotion {
  promotion_id   Int           @id @default(autoincrement())
  eventId        Int
  type           PromotionType
  value          Int
  promotionCode  String        @unique
  startDate      DateTime
  expirationDate DateTime
  maxUse         Int
  useCount       Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  event          Event         @relation(fields: [eventId], references: [event_id])
}

model PointBalance {
  id             Int       @id @default(autoincrement())
  points         Int       @default(0)
  expirationDate DateTime?
  userId         Int
  createdAt      DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
}

model DiscountCoupon {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  discount       Int
  userId         Int
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt
  expirationDate DateTime
  user           User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum PromotionType {
  PERCENTAGE
  FLAT
}
